=================================================================================

Persoonlijk ontwikkelingsplan (POP) - opvolgingsdocument Academiejaar 2019-2020

=================================================================================

<
  Opmerking:
  In het onderstaande document vervang je alle tekst tussen '<' en '>' door wat gevraagd wordt
  of je verwijdert ze indien het enkel over commentaar gaat (zoals deze paragraaf).
>

Student:	Dmitriy Van der Elst

Mentor:		Joris Maervoet

=================================================================================
Beschrijving - datum 26/09/2019
=================================================================================

Onderwerp:

Android apps ontwikkelen in Kotlin


Einddoelen (met evaluatiecriteria):

1. Volledige kennis van de Kotlin syntax en programmeervormen.
2. Slagen op de aanwezige quizzes in de courses.
3. Beschrijving van het hele process en vergelijkingen maken met bestaande kennis van Java.


Motivatie - betrokkenheid:

Het is al een levenslang doel van mij om ooit eens een android app te maken.
Echter heb ik hier nooit echt de tijd voor gehad omdat er andere dingen zijn waar ik liever tijd voor maakte.
Met POP heb ik nu de kans om mij hier volledig in te gooien en op te focussen met een volledig vooropgesteld plan met duidelijke doelen.

Motivatie - grenzen verleggen:

Zelf heb ik nog nooit buiten de schooluren een programmeertaal geleerd.
Het gebruik van een online leerplatform is ook nieuw voor mij en ik ben benieuwd hoe dit in zijn werk gaat.

Motivatie - professioneel profiel:

Aangezien ik voor Web & Mobile gekozen heb zal Kotlin en bij toevoeging Android apps ontwikkelen zeken een meerwaarde zijn voor mijn persoonlijke groei en kennis.

<Geef hier de opsomming van de kerndoelen van de opleiding waarbinnen je voorstel past, bijvoorbeeld: 

kerndoelen:
1) Kotlin Bootcamp for Programmers:
1.a Introduction - Set up IntelliJ, the IDE that we will use in this course, and understand the major benefits of learning and using Kotlin.
1.b Kotlin Basics - Use the Kotlin interpreter to get comfortable with basic language features. Write Kotlin statements and expressions, and practice using operators.
1.c Functions - Create and call functions with default and variable arguments. Pass functions as arguments to filters, and program simple lambdas.
1.d Classes - Learn how object-oriented programming works in Kotlin. Build private and public classes, including abstract classes and interfaces. Understand data classes and special purpose classes.
1.e Kotlin Essentials: Beyond the Basics: Learn about more advanced features such as pairs, annotations, and extension functions. Understand how to use constants, collections, and generics in Kotlin.
1.f Functional Manipulation - Dive into lambdas and higher-order functions in Kotlin. Learn how to write inline functions and Single Abstract Method (SAM) interfaces.

2) Developing Android Apps with Kotlin:
2.a Building your First App - Build your first app: "Dice Roller" that covers basic Android components like displaying texts and images as well as a tour of the Android tools you'll be using throughout this course.
2.b Layouts - Designing your app's UI is the first step to a great user experience. This lesson covers all the basics of UI layout design. You'll use all the popular view types with a focus on the ContraintLayout.
2.c App Navigation - Building multiple screens on Android has never been easier with the Navigation library. You'll get to build a fun trivia app using multiple fragments and conditional navigation.
2.d Activity & Fragment Lifecycle - Understanding the concept of Lifecycles for both activities and fragments is what makes a great Android developer! Have a treat with this delicious "Dessert Pusher" app.
2.e App Architecture (UI Layer) - With Architecture Components you'll have the power to design even the most complicated app ideas. Combine ViewModels with LiveData to build this super fun "Guess it" game.
2.f App Architecture (Persistence) - This lesson is all about data persistence, there are many ways to storing data permanently, but with Room things have become even easier than ever before!
2.g RecycleView - Everything is better in a list! Recycler View has been - and continues to be - an essential component of any app design. This lesson is all about making your app better with Recycler Views.
2.h Connect to the Internet - Need some live data in your app? In this lesson you'll use Retrofit to communicate with any API service out there. You'll also use Glide to display images from the web.
2.i Behind the Scenes - Not everything is displayed on the screen. In Android, there's so much happening in the background and you'll get to build your own background services and tasks in this lesson.
2.j Designing for Everyone - Coming up with a good design for an app is always hard, but creating a great design is more than just colors and layouts. Let's build an app that is designed for everyone, everywhere!

>

<Werkvormen:

Het volgen van de door google opgestelde 'Kotlin Bootcamp for Programmers’ en ‘Developing Android Apps with Kotlin’ courses op Udacity.

>



Feedback mentor - 03/10/2019 
----------------------------

Dag Dmitriy,

(1) Kotlin is zeker een goed element voor je POP-project, maar uiteindelijk niet zo moeilijk en niet zo uitgebreid. Vandaar dat het interessant is om er nog iets bij te doen. 
bv. een aantal interessante uitbreidingen van kotlin zoeken zie https://kotlin.link/
bv. tegenhanger Android Studio dev
bv. een framework op de server bijdoen om een Web API te creëren die je vanuit Kotlin gebruikt

(2) Kan je je einddoelen stevig herformuleren (zie voorbeelden studiewijzer !!)
- elke indicator moet voldoende concreet en toestbaar zijn
- voorzie indicatoren gericht op kennis, en indicatoren gericht op toepassing
- opmerking: een quiz is niet zo'n interessant bewijs (je kan bv. oefeningen bijhouden, rapport schrijven, certificaat halen, ...) en een vergelijking maken met Java is eigenlijk niet zo zinvol voor iedereen 
- probeer er ook zeker een toepassing in te steken (een app die je gaat maken waarin je een aantal aspecten (schrijf deze op) van Kotlin illustreert)

Veel succes!


E-mail student - 03/10/2019
---------------------------
Hiernaast wil ik ook even melden dat Kotlin niet het enigste is dat ik wil doen. In het voorstel staat ook dat ik hiermee android apps wil leren ontwikkelen. 
Hierin zal het meeste van het werk kruipen aangezien Kotlin vooral het aanleren van een nieuwe syntax is en niet veel meer buiten een aantal uitzonderingen. 
In het tweede deel, leren android apps ontwikkelen in Kotlin, zal het meeste tijd kruipen. Daarom heb ik ook bij de kerndoelen de titels en beschrijvingen 
van lessen geplaatst omdat deze vrij duidelijk illustreren wat erin geleerd zal worden. Nadat ik dan de twee courses (Kotlin & Android app dev. in Kotlin) heb 
voltooid is het dan de bedoeling om een kleine eigen app te maken die toont dat ik de nodige kennis verworven heb. Daarom wil ik vragen om mijn projectvoorstel 
nog eens te lezen, vooral het deel van de tweede course (2) Developing Android Apps with Kotlin).


Feedback mentor - 05/10/2019 
----------------------------
Ik had niet door dat het om Udacity-courses ging; zo'n zaken moet je allemaal zeker opnemen in je einddoelen. Er zijn in het verleden zeker studenten geweest die 
(via andere kanalen) op een 20 à 30-tal uur Kotlin+Android Apps met Kotlin aanleren, en daar dan nog iets bijdoen. Nu zie ik de duurtijd in Udacity, en voor mij is 
het okee dat je het daarbij houdt dan.

Kan je wel je einddoelen stevig herformuleren ? (zie deel (2) vorige feedback)



=================================================================================
Planning - <datum van eerste ingave> (op te stellen nadat je voorstel is goedgekeurd)
=================================================================================

<Hou hier je werkplanning bij, op te stellen nadat je voorstel is goedgekeurd>


=================================================================================
Logboek
=================================================================================

<Noteer hier je activiteiten, gevonden informatie, behaalde milestones, 
belangrijke gebeurtenissen, problemen, oplossingen...
Zet voor elke nieuwe entry op een aparte lijn je naam en de datum.
Als je dat wil, mag je de zuiver technische informatie in een aanvullend 'technisch logboek'
bijhouden (binnen je repository). In dat geval kan je hier bij de verschillende entries verwijzen
naar dat technisch logboek.>












=================================================================================
Eerste tussenrapportering - <datum van ingave>
=================================================================================

Stand van zaken:

<Geef hier een korte stand van zaken van wat er gebeurd is sinds de start: 
Wat is er gerealiseerd? Wat moet nog gebeuren? Wat zijn bijzondere gebeurtenissen?
Wat zijn problemen die je nog moet oplossen?>

Reflectie:

<Hoe werkt je aanpak? Waar had je achteraf gezien beter anders te werk kunnen gaan?
Hoe ga je eventueel bijsturen? Welke aanpassingen zijn er nodig in je planning?>


Zelfevaluatie:

<Geef jezelf hier een score (gaande van 'NVT' tot 'A') voor de items die in het 
evaluatiedocument een witte achtergrond hebben>


Feedback vanwege mentor - <datum van ingave>:

<Hier komt de feedback en opmerkingen vanwege de mentor>



=================================================================================
(optioneel) Tweede tussenrapportering - <datum van ingave>
=================================================================================

Stand van zaken:

<Geef hier een korte stand van zaken van wat er gebeurd is sinds vorige tussenrapportering: 
Wat is er gerealiseerd? Wat moet nog gebeuren? Wat zijn bijzondere gebeurtenissen?
Wat zijn problemen die je nog moet oplossen?>

Reflectie:

<Hoe werkt je aanpak? Waar had je achteraf gezien beter anders te werk kunnen gaan?
Hebben vroegere bijsturingen het gewenste effect? Wat wil je nog wijzigen in je aanpak of planning?>


Zelfevaluatie:

<Geef jezelf hier een score (gaande van 'NVT' tot 'A') voor de items die in het 
evaluatiedocument een witte achtergrond hebben>


Feedback vanwege mentor - <datum van ingave>:

<Hier komt de feedback en opmerkingen vanwege de mentor>



=================================================================================
Eindrapportering - <datum van ingave>
=================================================================================


Eindrapportering:

<Geef hier een eindstand van wat je bereikt hebt (en wat niet).
Hierin verwijs je ook naar eventuele bijkomende documenten of informatie om dit te onderbouwen.>

Reflectie:

<Geef hier een reflectie over je aanpak, je originele einddoelen, en je resultaat: Wat was goed?
 Wat had beter gekund? Waren er alternatieven voor je aanpak? Wat zou je achteraf gezien anders
 gedaan hebben? Hoe zou je je nog verder kunnen profileren in de richting van je onderwerp? >


Inhoud Portfolio:

<Geef hier een overzicht van de informatie die je portfolio bevat> 


Bronnenlijst:

<Geef hier een lijst van gebruikte bronnen volgens de IEEE-standaard>

Zelfevaluatie:

<Geef jezelf hier een score (gaande van 'NVT' tot 'A') voor de items die in het 
evaluatiedocument een witte achtergrond hebben>








